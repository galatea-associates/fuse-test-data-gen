""" Calculate job size, or batch retrieval size, for each domain object.

    Calculates the job sizes where domain objects have nondeterministic output
    amount. Nondeterministic domain object are those which are dependent on
    prior outputs. For instance:

    Swap Contracts are based on the number of counterparties as well as
    the 'Swaps per Counterparty' range set by the user in config.
    Swap Positions are based on the number of Swap Contracts, the
    'instruments per swap' and the date ranges set by the user in config.
    Cashflows are based on the number of Swap Positions and whether
    user-defined cashflow types accrue (in the case of percentage chance)

    The user-provided job size (number of objects each processes should
    generate) is inaccurate when dealing with these dependent objects. The
    amount generated for each of the above hinges on both randomness, and
    the amount of its dependent objects that have been generated. Therefore,
    when dealing with nondeterministic objects, rather than using job size,
    we are calculating the number of its dependent objects to retrieve in one
    batch, such that we are likely to result in a number of objects per
    generation process that is close to the specified job size.
    """
import math
from datetime import datetime


def get(object_factory):
    """Entry point. Defers functionality depending on given object name.

    Entry point of these scripts. If the input domain objects generation
    amount is nondeterministic, then the calculation is deferred to the
    batch size calculation for that domain object. Otherwise we can trivially
    return the user-provided job size.

    Parameters
    ----------
    obj_name : String
        Name of the current domain object, used to verify whether the current
        object generates a nonterministic amount or not.
    custom_args : dict
        Contains custom arguments of the current domain object.
    default_job_size : int
        The user-specified amount of objects each processes should generate.

    Returns
    -------
    int
        The number of objects each processes should generate where object has
        a known amount to generate. Or the number of objects each process
        should retrieve from the database for generation where the objects has
        an unknown amount to generate.
    """
    factory_config = object_factory.get_factory_config() 
    factory_name = next(iter(factory_config))

    default_job_size = object_factory.get_shared_args()['pool_job_size']
    # custom_args = object_factory.

    nondeterministic_objects = ['swap_contract', 'swap_position', 'cashflow']
    if factory_name not in nondeterministic_objects:
        return default_job_size
    elif factory_name == 'swap_contract':
        return swap_contract_size(custom_args, default_job_size)
    elif factory_name == 'swap_position':
        return swap_position_size(custom_args, default_job_size)
    elif factory_name == 'cashflow':
        return cashflow_size(custom_args, default_job_size)
    else:
        print("Object not found")


def swap_contract_size(custom_args, target_num_records):
    """Calculates the size of database batch retrievals when generating Swap
    Contracts.

    Derived from the range of swaps per counterparts and the generation method
    of Swap Contracts. Trying to find number of counterparties to retrieve.

    Swap Contracts Generated   = X
    Counterparties             = C
    Min Swaps per Counterparty = Min
    Max Swaps per Counterparty = Max

    X ~ C*((Min+Max)/2)
    C ~ 2X/(Min+Max)

    Parameters
    ----------
    custom_args : dict
        User-provided configuration containing min/max values for swaps per
        counterparty.
    target_num_records : int
        The number of records to be generated by each generation process

    Returns
    -------
    int
        The number of counterparties to retrieve in each batch to generate
        roughly the number of objects to generate per process.
    """
    swaps_per_counterparty = custom_args['swap_per_counterparty']
    min_swaps = int(swaps_per_counterparty['min'])
    max_swaps = int(swaps_per_counterparty['max'])
    batch_size = math.ceil((2*target_num_records)/(min_swaps + max_swaps))
    return batch_size


# Calculate the average number of Swap Contracts to retrieve from DB in
# order to generate the default_job_size worth of Swap Position records
# based on given configuration
def swap_position_size(custom_args, target_num_records):
    """Calculates the size of database retrievals when generating Swap
    Positions.

    Derived from the range of instruments per contract, length of date range,
    and the generation method of swap positions. Trying to find number of
    Swap Contracts to retrieve.

    Swap Positions Generated     = X
    Num Swap Contracts           = C
    Length of given Date Range   = D
    Min instruments per contract = Min
    Max instruments per contract = Max
    Number of Position Types     = 3

    X ~ C * D * (Min + Max)/2 * 3
    (2 * X)/3 ~ C * D * (Min + Max)
    C ~ (2 * X)/(3 * D * (Min + Max))

    Parameters
    ----------
    custom_args : dict
        User-provided configuration containing min/max values for swaps per
        counterparty.
    target_num_records : int
        The number of records to be generated by each generation process

    Returns
    -------
    int
        The number of counterparties to retrieve in each batch to generate
        roughly the number of objects to generate per process.
    """
    start_date = custom_args['start_date']
    start_date = datetime.strptime(start_date, '%Y%m%d')
    end_date = datetime.today()
    num_dates = ((end_date-start_date).days)+1
    ins_per_swap = custom_args['ins_per_swap']
    ins_min = int(ins_per_swap['min'])
    ins_max = int(ins_per_swap['max'])

    batch_size = math.ceil((2*target_num_records) /
                           (3*num_dates*(ins_min+ins_max)))
    return batch_size


def cashflow_size(custom_args, target_num_records):
    """Calculates the size of database retrievals when generating Cashflows.

    Derived from the chance of accrual for each cashflow type given,
    and the generation method of cashflows. Trying to find number of
    Swap Positions to retrieve.

    Parameters
    ----------
    custom_args : dict
        User-provided configuration containing min/max values for swaps per
        counterparty.
    target_num_records : int
        The number of records to be generated by each generation process

    Returns
    -------
    int
        The number of counterparties to retrieve in each batch to generate
        roughly the number of objects to generate per process.
    """
    cashflow_args = custom_args['cashflow_generation']
    sum_probability = 0

    for cashflow in cashflow_args:
        accrual_chance = cashflow['cashFlowAccrualProbability']
        sum_probability += (accrual_chance/100)

    batch_size = math.ceil(target_num_records/sum_probability)
    return batch_size
